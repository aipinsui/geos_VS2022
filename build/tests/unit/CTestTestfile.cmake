# CMake generated Testfile for 
# Source directory: E:/geos_VS2022/tests/unit
# Build directory: E:/geos_VS2022/build/tests/unit
# 
# This file includes the relevant testing commands required for 
# testing this directory and lists subdirectories to be tested as well.
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Angle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Angle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Angle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Angle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Angle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Area "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Area "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Area "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Area "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Area NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-OrientationIsCCW "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::OrientationIsCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-OrientationIsCCW PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-OrientationIsCCW "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::OrientationIsCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-OrientationIsCCW PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-OrientationIsCCW "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::OrientationIsCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-OrientationIsCCW PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-OrientationIsCCW "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::OrientationIsCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-OrientationIsCCW PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-OrientationIsCCW NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-computeOrientation NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-isPointInRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-signedArea NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Centroid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Centroid")
  set_tests_properties(unit-algorithm-Centroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Centroid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Centroid")
  set_tests_properties(unit-algorithm-Centroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Centroid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Centroid")
  set_tests_properties(unit-algorithm-Centroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Centroid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Centroid")
  set_tests_properties(unit-algorithm-Centroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Centroid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-ConvexHull "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-ConvexHull "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-ConvexHull "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-ConvexHull "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-ConvexHull NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-InteriorPointArea "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-InteriorPointArea "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-InteriorPointArea "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-InteriorPointArea "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-InteriorPointArea NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Interpolate "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Interpolate")
  set_tests_properties(unit-algorithm-Interpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Interpolate "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Interpolate")
  set_tests_properties(unit-algorithm-Interpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Interpolate "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Interpolate")
  set_tests_properties(unit-algorithm-Interpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Interpolate "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Interpolate")
  set_tests_properties(unit-algorithm-Interpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Interpolate NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Intersection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Intersection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Intersection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Intersection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Intersection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Length "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Length "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Length "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Length "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Length NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-LocatePointInRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-LocatePointInRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-LocatePointInRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-LocatePointInRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-LocatePointInRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-MinimumAreaRectangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::MinimumAreaRectangle")
  set_tests_properties(unit-algorithm-MinimumAreaRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-MinimumAreaRectangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::MinimumAreaRectangle")
  set_tests_properties(unit-algorithm-MinimumAreaRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-MinimumAreaRectangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::MinimumAreaRectangle")
  set_tests_properties(unit-algorithm-MinimumAreaRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-MinimumAreaRectangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::MinimumAreaRectangle")
  set_tests_properties(unit-algorithm-MinimumAreaRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-MinimumAreaRectangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-MinimumBoundingCircle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-MinimumBoundingCircle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-MinimumBoundingCircle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-MinimumBoundingCircle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-MinimumBoundingCircle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-MinimumDiameter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-MinimumDiameter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-MinimumDiameter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-MinimumDiameter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-MinimumDiameter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-OrientationIndexFailure "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-OrientationIndexFailure "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-OrientationIndexFailure "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-OrientationIndexFailure "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-OrientationIndexFailure NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-PointLocator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-PointLocator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-PointLocator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-PointLocator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-PointLocator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-PolygonNodeTopology "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::PolygonNodeTopology")
  set_tests_properties(unit-algorithm-PolygonNodeTopology PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-PolygonNodeTopology "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::PolygonNodeTopology")
  set_tests_properties(unit-algorithm-PolygonNodeTopology PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-PolygonNodeTopology "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::PolygonNodeTopology")
  set_tests_properties(unit-algorithm-PolygonNodeTopology PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-PolygonNodeTopology "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::PolygonNodeTopology")
  set_tests_properties(unit-algorithm-PolygonNodeTopology PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-PolygonNodeTopology NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Rectangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::Rectangle")
  set_tests_properties(unit-algorithm-Rectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Rectangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::Rectangle")
  set_tests_properties(unit-algorithm-Rectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Rectangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Rectangle")
  set_tests_properties(unit-algorithm-Rectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Rectangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Rectangle")
  set_tests_properties(unit-algorithm-Rectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Rectangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-RobustLineIntersection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-RobustLineIntersection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-RobustLineIntersection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-RobustLineIntersection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-RobustLineIntersection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-RobustLineIntersector "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-RobustLineIntersector "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-RobustLineIntersector "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-RobustLineIntersector "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-RobustLineIntersector NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-RobustLineIntersectorZ "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::RobustLineIntersectorZ")
  set_tests_properties(unit-algorithm-RobustLineIntersectorZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-RobustLineIntersectorZ "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::RobustLineIntersectorZ")
  set_tests_properties(unit-algorithm-RobustLineIntersectorZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-RobustLineIntersectorZ "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::RobustLineIntersectorZ")
  set_tests_properties(unit-algorithm-RobustLineIntersectorZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-RobustLineIntersectorZ "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::RobustLineIntersectorZ")
  set_tests_properties(unit-algorithm-RobustLineIntersectorZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-RobustLineIntersectorZ NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-construct-LargestEmptyCircle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::construct::LargestEmptyCircle")
  set_tests_properties(unit-algorithm-construct-LargestEmptyCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-construct-LargestEmptyCircle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::construct::LargestEmptyCircle")
  set_tests_properties(unit-algorithm-construct-LargestEmptyCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-construct-LargestEmptyCircle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::construct::LargestEmptyCircle")
  set_tests_properties(unit-algorithm-construct-LargestEmptyCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-construct-LargestEmptyCircle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::construct::LargestEmptyCircle")
  set_tests_properties(unit-algorithm-construct-LargestEmptyCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-construct-LargestEmptyCircle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-construct-MaximumInscribedCircle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::construct::MaximumInscribedCircle")
  set_tests_properties(unit-algorithm-construct-MaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-construct-MaximumInscribedCircle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::construct::MaximumInscribedCircle")
  set_tests_properties(unit-algorithm-construct-MaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-construct-MaximumInscribedCircle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::construct::MaximumInscribedCircle")
  set_tests_properties(unit-algorithm-construct-MaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-construct-MaximumInscribedCircle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::construct::MaximumInscribedCircle")
  set_tests_properties(unit-algorithm-construct-MaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-construct-MaximumInscribedCircle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-distance-DiscreteFrechetDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-hull-ConcaveHullOfPolygons "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHullOfPolygons")
  set_tests_properties(unit-algorithm-hull-ConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-hull-ConcaveHullOfPolygons "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHullOfPolygons")
  set_tests_properties(unit-algorithm-hull-ConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-hull-ConcaveHullOfPolygons "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHullOfPolygons")
  set_tests_properties(unit-algorithm-hull-ConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-hull-ConcaveHullOfPolygons "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHullOfPolygons")
  set_tests_properties(unit-algorithm-hull-ConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-hull-ConcaveHullOfPolygons NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-hull-ConcaveHull "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHull")
  set_tests_properties(unit-algorithm-hull-ConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-hull-ConcaveHull "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHull")
  set_tests_properties(unit-algorithm-hull-ConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-hull-ConcaveHull "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHull")
  set_tests_properties(unit-algorithm-hull-ConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-hull-ConcaveHull "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::hull::ConcaveHull")
  set_tests_properties(unit-algorithm-hull-ConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-hull-ConcaveHull NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-locate-IndexedPointInAreaLocator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::algorithm::locate::IndexedPointInAreaLocator")
  set_tests_properties(unit-algorithm-locate-IndexedPointInAreaLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-locate-IndexedPointInAreaLocator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::algorithm::locate::IndexedPointInAreaLocator")
  set_tests_properties(unit-algorithm-locate-IndexedPointInAreaLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-locate-IndexedPointInAreaLocator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::locate::IndexedPointInAreaLocator")
  set_tests_properties(unit-algorithm-locate-IndexedPointInAreaLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-locate-IndexedPointInAreaLocator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::locate::IndexedPointInAreaLocator")
  set_tests_properties(unit-algorithm-locate-IndexedPointInAreaLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-locate-IndexedPointInAreaLocator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSBoundary "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSBoundary")
  set_tests_properties(unit-capi-GEOSBoundary PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSBoundary "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSBoundary")
  set_tests_properties(unit-capi-GEOSBoundary PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSBoundary "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSBoundary")
  set_tests_properties(unit-capi-GEOSBoundary PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSBoundary "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSBoundary")
  set_tests_properties(unit-capi-GEOSBoundary PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSBoundary NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSBuffer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSBuffer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSBuffer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSBuffer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSBuffer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSBuildArea "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSBuildArea "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSBuildArea "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSBuildArea "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSBuildArea NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCAPIDefines "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCAPIDefines "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCAPIDefines "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCAPIDefines "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCAPIDefines NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSClipByRect "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSClipByRect "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSClipByRect "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSClipByRect "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSClipByRect NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSConcaveHullOfPolygons "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSConcaveHullOfPolygons")
  set_tests_properties(unit-capi-GEOSConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSConcaveHullOfPolygons "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSConcaveHullOfPolygons")
  set_tests_properties(unit-capi-GEOSConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSConcaveHullOfPolygons "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSConcaveHullOfPolygons")
  set_tests_properties(unit-capi-GEOSConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSConcaveHullOfPolygons "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSConcaveHullOfPolygons")
  set_tests_properties(unit-capi-GEOSConcaveHullOfPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSConcaveHullOfPolygons NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSConcaveHull "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSConcaveHull")
  set_tests_properties(unit-capi-GEOSConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSConcaveHull "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSConcaveHull")
  set_tests_properties(unit-capi-GEOSConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSConcaveHull "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSConcaveHull")
  set_tests_properties(unit-capi-GEOSConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSConcaveHull "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSConcaveHull")
  set_tests_properties(unit-capi-GEOSConcaveHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSConcaveHull NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSConstrainedDelaunayTriangulation "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSConstrainedDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSConstrainedDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSConstrainedDelaunayTriangulation "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSConstrainedDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSConstrainedDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSConstrainedDelaunayTriangulation "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSConstrainedDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSConstrainedDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSConstrainedDelaunayTriangulation "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSConstrainedDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSConstrainedDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSConstrainedDelaunayTriangulation NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSContains "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSContains "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSContains "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSContains "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSContains NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSContext "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSContext")
  set_tests_properties(unit-capi-GEOSContext PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSContext "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSContext")
  set_tests_properties(unit-capi-GEOSContext PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSContext "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSContext")
  set_tests_properties(unit-capi-GEOSContext PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSContext "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSContext")
  set_tests_properties(unit-capi-GEOSContext PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSContext NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSConvexHull "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSConvexHull "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSConvexHull "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSConvexHull "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSConvexHull NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoordSeq "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoordSeq "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoordSeq "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoordSeq "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoordSeq NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoverageIsValid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCoverageIsValid")
  set_tests_properties(unit-capi-GEOSCoverageIsValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoverageIsValid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCoverageIsValid")
  set_tests_properties(unit-capi-GEOSCoverageIsValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoverageIsValid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoverageIsValid")
  set_tests_properties(unit-capi-GEOSCoverageIsValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoverageIsValid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoverageIsValid")
  set_tests_properties(unit-capi-GEOSCoverageIsValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoverageIsValid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoverageSimplify "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCoverageSimplify")
  set_tests_properties(unit-capi-GEOSCoverageSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoverageSimplify "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCoverageSimplify")
  set_tests_properties(unit-capi-GEOSCoverageSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoverageSimplify "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoverageSimplify")
  set_tests_properties(unit-capi-GEOSCoverageSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoverageSimplify "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoverageSimplify")
  set_tests_properties(unit-capi-GEOSCoverageSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoverageSimplify NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoverageUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoverageUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoverageUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoverageUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoverageUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoveredBy "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCoveredBy")
  set_tests_properties(unit-capi-GEOSCoveredBy PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoveredBy "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCoveredBy")
  set_tests_properties(unit-capi-GEOSCoveredBy PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoveredBy "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoveredBy")
  set_tests_properties(unit-capi-GEOSCoveredBy PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoveredBy "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoveredBy")
  set_tests_properties(unit-capi-GEOSCoveredBy PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoveredBy NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCovers "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCovers")
  set_tests_properties(unit-capi-GEOSCovers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCovers "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCovers")
  set_tests_properties(unit-capi-GEOSCovers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCovers "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCovers")
  set_tests_properties(unit-capi-GEOSCovers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCovers "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCovers")
  set_tests_properties(unit-capi-GEOSCovers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCovers NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCrosses "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSCrosses")
  set_tests_properties(unit-capi-GEOSCrosses PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCrosses "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSCrosses")
  set_tests_properties(unit-capi-GEOSCrosses PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCrosses "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCrosses")
  set_tests_properties(unit-capi-GEOSCrosses PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCrosses "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCrosses")
  set_tests_properties(unit-capi-GEOSCrosses PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCrosses NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDelaunayTriangulation NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDensify "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDensify")
  set_tests_properties(unit-capi-GEOSDensify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDensify "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDensify")
  set_tests_properties(unit-capi-GEOSDensify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDensify "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDensify")
  set_tests_properties(unit-capi-GEOSDensify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDensify "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDensify")
  set_tests_properties(unit-capi-GEOSDensify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDensify NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDifferencePrec "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDifferencePrec")
  set_tests_properties(unit-capi-GEOSDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDifferencePrec "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDifferencePrec")
  set_tests_properties(unit-capi-GEOSDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDifferencePrec "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDifferencePrec")
  set_tests_properties(unit-capi-GEOSDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDifferencePrec "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDifferencePrec")
  set_tests_properties(unit-capi-GEOSDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDifferencePrec NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDifference "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDifference")
  set_tests_properties(unit-capi-GEOSDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDifference "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDifference")
  set_tests_properties(unit-capi-GEOSDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDifference "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDifference")
  set_tests_properties(unit-capi-GEOSDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDifference "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDifference")
  set_tests_properties(unit-capi-GEOSDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDifference NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDisjointSubsetUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDisjointSubsetUnion")
  set_tests_properties(unit-capi-GEOSDisjointSubsetUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDisjointSubsetUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDisjointSubsetUnion")
  set_tests_properties(unit-capi-GEOSDisjointSubsetUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDisjointSubsetUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDisjointSubsetUnion")
  set_tests_properties(unit-capi-GEOSDisjointSubsetUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDisjointSubsetUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDisjointSubsetUnion")
  set_tests_properties(unit-capi-GEOSDisjointSubsetUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDisjointSubsetUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDisjoint "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDisjoint")
  set_tests_properties(unit-capi-GEOSDisjoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDisjoint "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDisjoint")
  set_tests_properties(unit-capi-GEOSDisjoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDisjoint "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDisjoint")
  set_tests_properties(unit-capi-GEOSDisjoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDisjoint "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDisjoint")
  set_tests_properties(unit-capi-GEOSDisjoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDisjoint NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDistanceWithin "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSDistanceWithin")
  set_tests_properties(unit-capi-GEOSDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDistanceWithin "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSDistanceWithin")
  set_tests_properties(unit-capi-GEOSDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDistanceWithin "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDistanceWithin")
  set_tests_properties(unit-capi-GEOSDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDistanceWithin "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDistanceWithin")
  set_tests_properties(unit-capi-GEOSDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDistanceWithin NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSEnvelope "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSEnvelope")
  set_tests_properties(unit-capi-GEOSEnvelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSEnvelope "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSEnvelope")
  set_tests_properties(unit-capi-GEOSEnvelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSEnvelope "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSEnvelope")
  set_tests_properties(unit-capi-GEOSEnvelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSEnvelope "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSEnvelope")
  set_tests_properties(unit-capi-GEOSEnvelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSEnvelope NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSEqualsIdentical "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSEqualsIdentical")
  set_tests_properties(unit-capi-GEOSEqualsIdentical PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSEqualsIdentical "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSEqualsIdentical")
  set_tests_properties(unit-capi-GEOSEqualsIdentical PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSEqualsIdentical "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSEqualsIdentical")
  set_tests_properties(unit-capi-GEOSEqualsIdentical PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSEqualsIdentical "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSEqualsIdentical")
  set_tests_properties(unit-capi-GEOSEqualsIdentical PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSEqualsIdentical NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSEquals "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSEquals "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSEquals "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSEquals "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSEquals NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSFrechetDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSFrechetDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSFrechetDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSFrechetDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSFrechetDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomFromWKB "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomFromWKB "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomFromWKB "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomFromWKB "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomFromWKB NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomGeoJSONRead "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomGeoJSONRead")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONRead PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomGeoJSONRead "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomGeoJSONRead")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONRead PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomGeoJSONRead "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomGeoJSONRead")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONRead PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomGeoJSONRead "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomGeoJSONRead")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONRead PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomGeoJSONRead NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomGeoJSONWrite "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomGeoJSONWrite")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONWrite PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomGeoJSONWrite "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomGeoJSONWrite")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONWrite PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomGeoJSONWrite "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomGeoJSONWrite")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONWrite PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomGeoJSONWrite "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomGeoJSONWrite")
  set_tests_properties(unit-capi-GEOSGeomGeoJSONWrite PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomGeoJSONWrite NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomGetNumPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomGetNumPoints")
  set_tests_properties(unit-capi-GEOSGeomGetNumPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomGetNumPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomGetNumPoints")
  set_tests_properties(unit-capi-GEOSGeomGetNumPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomGetNumPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomGetNumPoints")
  set_tests_properties(unit-capi-GEOSGeomGetNumPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomGetNumPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomGetNumPoints")
  set_tests_properties(unit-capi-GEOSGeomGetNumPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomGetNumPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomGetXYZM "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomGetXYZM")
  set_tests_properties(unit-capi-GEOSGeomGetXYZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomGetXYZM "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomGetXYZM")
  set_tests_properties(unit-capi-GEOSGeomGetXYZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomGetXYZM "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomGetXYZM")
  set_tests_properties(unit-capi-GEOSGeomGetXYZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomGetXYZM "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomGetXYZM")
  set_tests_properties(unit-capi-GEOSGeomGetXYZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomGetXYZM NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomToHEX_buf "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomToHEX_buf")
  set_tests_properties(unit-capi-GEOSGeomToHEX_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomToHEX_buf "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomToHEX_buf")
  set_tests_properties(unit-capi-GEOSGeomToHEX_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomToHEX_buf "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomToHEX_buf")
  set_tests_properties(unit-capi-GEOSGeomToHEX_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomToHEX_buf "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomToHEX_buf")
  set_tests_properties(unit-capi-GEOSGeomToHEX_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomToHEX_buf NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomToWKB "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomToWKB")
  set_tests_properties(unit-capi-GEOSGeomToWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomToWKB "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomToWKB")
  set_tests_properties(unit-capi-GEOSGeomToWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomToWKB "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomToWKB")
  set_tests_properties(unit-capi-GEOSGeomToWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomToWKB "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomToWKB")
  set_tests_properties(unit-capi-GEOSGeomToWKB PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomToWKB NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomToWKB_buf "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomToWKB_buf")
  set_tests_properties(unit-capi-GEOSGeomToWKB_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomToWKB_buf "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomToWKB_buf")
  set_tests_properties(unit-capi-GEOSGeomToWKB_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomToWKB_buf "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomToWKB_buf")
  set_tests_properties(unit-capi-GEOSGeomToWKB_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomToWKB_buf "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomToWKB_buf")
  set_tests_properties(unit-capi-GEOSGeomToWKB_buf PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomToWKB_buf NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomToWKT "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomToWKT "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomToWKT "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomToWKT "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomToWKT NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomTypeId "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomTypeId")
  set_tests_properties(unit-capi-GEOSGeomTypeId PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomTypeId "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomTypeId")
  set_tests_properties(unit-capi-GEOSGeomTypeId PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomTypeId "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomTypeId")
  set_tests_properties(unit-capi-GEOSGeomTypeId PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomTypeId "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomTypeId")
  set_tests_properties(unit-capi-GEOSGeomTypeId PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomTypeId NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomType "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomType")
  set_tests_properties(unit-capi-GEOSGeomType PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomType "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeomType")
  set_tests_properties(unit-capi-GEOSGeomType PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomType "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomType")
  set_tests_properties(unit-capi-GEOSGeomType PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomType "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomType")
  set_tests_properties(unit-capi-GEOSGeomType PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomType NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_clone "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_clone")
  set_tests_properties(unit-capi-GEOSGeom_clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_clone "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_clone")
  set_tests_properties(unit-capi-GEOSGeom_clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_clone "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_clone")
  set_tests_properties(unit-capi-GEOSGeom_clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_clone "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_clone")
  set_tests_properties(unit-capi-GEOSGeom_clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_clone NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_createCollection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_createCollection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_createCollection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_createCollection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_createCollection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_createLineString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_createLineString")
  set_tests_properties(unit-capi-GEOSGeom_createLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_createLineString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_createLineString")
  set_tests_properties(unit-capi-GEOSGeom_createLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_createLineString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_createLineString")
  set_tests_properties(unit-capi-GEOSGeom_createLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_createLineString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_createLineString")
  set_tests_properties(unit-capi-GEOSGeom_createLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_createLineString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_createPolygon "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_createPolygon")
  set_tests_properties(unit-capi-GEOSGeom_createPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_createPolygon "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_createPolygon")
  set_tests_properties(unit-capi-GEOSGeom_createPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_createPolygon "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_createPolygon")
  set_tests_properties(unit-capi-GEOSGeom_createPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_createPolygon "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_createPolygon")
  set_tests_properties(unit-capi-GEOSGeom_createPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_createPolygon NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_createRectangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_createRectangle")
  set_tests_properties(unit-capi-GEOSGeom_createRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_createRectangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_createRectangle")
  set_tests_properties(unit-capi-GEOSGeom_createRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_createRectangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_createRectangle")
  set_tests_properties(unit-capi-GEOSGeom_createRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_createRectangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_createRectangle")
  set_tests_properties(unit-capi-GEOSGeom_createRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_createRectangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_create "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_create "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_create "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_create "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_create NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_extent "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_extent "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_extent "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_extent "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_extent NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_extractUniquePoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_getCoordSeq "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_getCoordSeq")
  set_tests_properties(unit-capi-GEOSGeom_getCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_getCoordSeq "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_getCoordSeq")
  set_tests_properties(unit-capi-GEOSGeom_getCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_getCoordSeq "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_getCoordSeq")
  set_tests_properties(unit-capi-GEOSGeom_getCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_getCoordSeq "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_getCoordSeq")
  set_tests_properties(unit-capi-GEOSGeom_getCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_getCoordSeq NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_getCoordinateDimension "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_getCoordinateDimension")
  set_tests_properties(unit-capi-GEOSGeom_getCoordinateDimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_getCoordinateDimension "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_getCoordinateDimension")
  set_tests_properties(unit-capi-GEOSGeom_getCoordinateDimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_getCoordinateDimension "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_getCoordinateDimension")
  set_tests_properties(unit-capi-GEOSGeom_getCoordinateDimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_getCoordinateDimension "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_getCoordinateDimension")
  set_tests_properties(unit-capi-GEOSGeom_getCoordinateDimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_getCoordinateDimension NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_getDimensions "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_getDimensions")
  set_tests_properties(unit-capi-GEOSGeom_getDimensions PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_getDimensions "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_getDimensions")
  set_tests_properties(unit-capi-GEOSGeom_getDimensions PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_getDimensions "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_getDimensions")
  set_tests_properties(unit-capi-GEOSGeom_getDimensions PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_getDimensions "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_getDimensions")
  set_tests_properties(unit-capi-GEOSGeom_getDimensions PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_getDimensions NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_setPrecision "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_setPrecision "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_setPrecision "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_setPrecision "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_setPrecision NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_transformXY "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_transformXY")
  set_tests_properties(unit-capi-GEOSGeom_transformXY PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_transformXY "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_transformXY")
  set_tests_properties(unit-capi-GEOSGeom_transformXY PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_transformXY "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_transformXY")
  set_tests_properties(unit-capi-GEOSGeom_transformXY PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_transformXY "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_transformXY")
  set_tests_properties(unit-capi-GEOSGeom_transformXY PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_transformXY NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetCentroid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetCentroid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetCentroid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetCentroid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetCentroid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetExteriorRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGetExteriorRing")
  set_tests_properties(unit-capi-GEOSGetExteriorRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetExteriorRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGetExteriorRing")
  set_tests_properties(unit-capi-GEOSGetExteriorRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetExteriorRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetExteriorRing")
  set_tests_properties(unit-capi-GEOSGetExteriorRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetExteriorRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetExteriorRing")
  set_tests_properties(unit-capi-GEOSGetExteriorRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetExteriorRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetGeometryN "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGetGeometryN")
  set_tests_properties(unit-capi-GEOSGetGeometryN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetGeometryN "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGetGeometryN")
  set_tests_properties(unit-capi-GEOSGetGeometryN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetGeometryN "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetGeometryN")
  set_tests_properties(unit-capi-GEOSGetGeometryN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetGeometryN "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetGeometryN")
  set_tests_properties(unit-capi-GEOSGetGeometryN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetGeometryN NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetInteriorRingN "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGetInteriorRingN")
  set_tests_properties(unit-capi-GEOSGetInteriorRingN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetInteriorRingN "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGetInteriorRingN")
  set_tests_properties(unit-capi-GEOSGetInteriorRingN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetInteriorRingN "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetInteriorRingN")
  set_tests_properties(unit-capi-GEOSGetInteriorRingN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetInteriorRingN "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetInteriorRingN")
  set_tests_properties(unit-capi-GEOSGetInteriorRingN PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetInteriorRingN NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetNumInteriorRings "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSGetNumInteriorRings")
  set_tests_properties(unit-capi-GEOSGetNumInteriorRings PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetNumInteriorRings "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSGetNumInteriorRings")
  set_tests_properties(unit-capi-GEOSGetNumInteriorRings PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetNumInteriorRings "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetNumInteriorRings")
  set_tests_properties(unit-capi-GEOSGetNumInteriorRings PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetNumInteriorRings "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetNumInteriorRings")
  set_tests_properties(unit-capi-GEOSGetNumInteriorRings PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetNumInteriorRings NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSHasZM "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSHasZM")
  set_tests_properties(unit-capi-GEOSHasZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSHasZM "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSHasZM")
  set_tests_properties(unit-capi-GEOSHasZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSHasZM "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSHasZM")
  set_tests_properties(unit-capi-GEOSHasZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSHasZM "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSHasZM")
  set_tests_properties(unit-capi-GEOSHasZM PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSHasZM NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSHausdorffDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSHausdorffDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSHausdorffDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSHausdorffDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSHausdorffDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSHilbertCode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSHilbertCode")
  set_tests_properties(unit-capi-GEOSHilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSHilbertCode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSHilbertCode")
  set_tests_properties(unit-capi-GEOSHilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSHilbertCode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSHilbertCode")
  set_tests_properties(unit-capi-GEOSHilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSHilbertCode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSHilbertCode")
  set_tests_properties(unit-capi-GEOSHilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSHilbertCode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSInterpolate "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSInterpolate "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSInterpolate "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSInterpolate "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSInterpolate NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSInterrupt "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSInterrupt "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSInterrupt "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSInterrupt "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSInterrupt NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSIntersectionPrec "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSIntersectionPrec")
  set_tests_properties(unit-capi-GEOSIntersectionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSIntersectionPrec "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSIntersectionPrec")
  set_tests_properties(unit-capi-GEOSIntersectionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSIntersectionPrec "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSIntersectionPrec")
  set_tests_properties(unit-capi-GEOSIntersectionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSIntersectionPrec "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSIntersectionPrec")
  set_tests_properties(unit-capi-GEOSIntersectionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSIntersectionPrec NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSIntersection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSIntersection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSIntersection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSIntersection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSIntersection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSIntersects "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSIntersects "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSIntersects "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSIntersects "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSIntersects NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLength "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSLength")
  set_tests_properties(unit-capi-GEOSLength PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLength "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSLength")
  set_tests_properties(unit-capi-GEOSLength PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLength "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLength")
  set_tests_properties(unit-capi-GEOSLength PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLength "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLength")
  set_tests_properties(unit-capi-GEOSLength PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLength NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLineMergeDirected "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSLineMergeDirected")
  set_tests_properties(unit-capi-GEOSLineMergeDirected PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLineMergeDirected "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSLineMergeDirected")
  set_tests_properties(unit-capi-GEOSLineMergeDirected PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLineMergeDirected "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLineMergeDirected")
  set_tests_properties(unit-capi-GEOSLineMergeDirected PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLineMergeDirected "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLineMergeDirected")
  set_tests_properties(unit-capi-GEOSLineMergeDirected PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLineMergeDirected NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLineMerge "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSLineMerge")
  set_tests_properties(unit-capi-GEOSLineMerge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLineMerge "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSLineMerge")
  set_tests_properties(unit-capi-GEOSLineMerge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLineMerge "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLineMerge")
  set_tests_properties(unit-capi-GEOSLineMerge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLineMerge "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLineMerge")
  set_tests_properties(unit-capi-GEOSLineMerge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLineMerge NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLineString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSLineString")
  set_tests_properties(unit-capi-GEOSLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLineString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSLineString")
  set_tests_properties(unit-capi-GEOSLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLineString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLineString")
  set_tests_properties(unit-capi-GEOSLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLineString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLineString")
  set_tests_properties(unit-capi-GEOSLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLineString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLineSubstring "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSLineSubstring")
  set_tests_properties(unit-capi-GEOSLineSubstring PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLineSubstring "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSLineSubstring")
  set_tests_properties(unit-capi-GEOSLineSubstring PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLineSubstring "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLineSubstring")
  set_tests_properties(unit-capi-GEOSLineSubstring PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLineSubstring "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLineSubstring")
  set_tests_properties(unit-capi-GEOSLineSubstring PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLineSubstring NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMakeValid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMakeValid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMakeValid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMakeValid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMakeValid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMaximumInscribedCircle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMaximumInscribedCircle")
  set_tests_properties(unit-capi-GEOSMaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMaximumInscribedCircle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMaximumInscribedCircle")
  set_tests_properties(unit-capi-GEOSMaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMaximumInscribedCircle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMaximumInscribedCircle")
  set_tests_properties(unit-capi-GEOSMaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMaximumInscribedCircle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMaximumInscribedCircle")
  set_tests_properties(unit-capi-GEOSMaximumInscribedCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMaximumInscribedCircle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumBoundingCircle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumClearance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumClearance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumClearance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumClearance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumClearance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumRotatedRectangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumRotatedRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRotatedRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumRotatedRectangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumRotatedRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRotatedRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumRotatedRectangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumRotatedRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRotatedRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumRotatedRectangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumRotatedRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRotatedRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumRotatedRectangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumWidth "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumWidth "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumWidth "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumWidth "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumWidth NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSNearestPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSNearestPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSNearestPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSNearestPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSNearestPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSNode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSNode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSNode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSNode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSNode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOffsetCurve "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOffsetCurve "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOffsetCurve "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOffsetCurve "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOffsetCurve NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOrientPolygons "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSOrientPolygons")
  set_tests_properties(unit-capi-GEOSOrientPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOrientPolygons "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSOrientPolygons")
  set_tests_properties(unit-capi-GEOSOrientPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOrientPolygons "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOrientPolygons")
  set_tests_properties(unit-capi-GEOSOrientPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOrientPolygons "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOrientPolygons")
  set_tests_properties(unit-capi-GEOSOrientPolygons PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOrientPolygons NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOrientationIndex "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOrientationIndex "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOrientationIndex "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOrientationIndex "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOrientationIndex NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOverlaps "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSOverlaps")
  set_tests_properties(unit-capi-GEOSOverlaps PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOverlaps "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSOverlaps")
  set_tests_properties(unit-capi-GEOSOverlaps PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOverlaps "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOverlaps")
  set_tests_properties(unit-capi-GEOSOverlaps PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOverlaps "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOverlaps")
  set_tests_properties(unit-capi-GEOSOverlaps PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOverlaps NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPointOnSurface "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPointOnSurface "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPointOnSurface "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPointOnSurface "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPointOnSurface NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPolygonHullSimplify "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPolygonHullSimplify")
  set_tests_properties(unit-capi-GEOSPolygonHullSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPolygonHullSimplify "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPolygonHullSimplify")
  set_tests_properties(unit-capi-GEOSPolygonHullSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPolygonHullSimplify "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPolygonHullSimplify")
  set_tests_properties(unit-capi-GEOSPolygonHullSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPolygonHullSimplify "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPolygonHullSimplify")
  set_tests_properties(unit-capi-GEOSPolygonHullSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPolygonHullSimplify NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPolygonize "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPolygonize "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPolygonize "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPolygonize "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPolygonize NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPreparedDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPreparedDistance")
  set_tests_properties(unit-capi-GEOSPreparedDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPreparedDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPreparedDistance")
  set_tests_properties(unit-capi-GEOSPreparedDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPreparedDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPreparedDistance")
  set_tests_properties(unit-capi-GEOSPreparedDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPreparedDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPreparedDistance")
  set_tests_properties(unit-capi-GEOSPreparedDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPreparedDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPreparedDistanceWithin "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPreparedDistanceWithin")
  set_tests_properties(unit-capi-GEOSPreparedDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPreparedDistanceWithin "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPreparedDistanceWithin")
  set_tests_properties(unit-capi-GEOSPreparedDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPreparedDistanceWithin "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPreparedDistanceWithin")
  set_tests_properties(unit-capi-GEOSPreparedDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPreparedDistanceWithin "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPreparedDistanceWithin")
  set_tests_properties(unit-capi-GEOSPreparedDistanceWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPreparedDistanceWithin NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPreparedGeometry "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPreparedGeometry "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPreparedGeometry "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPreparedGeometry "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPreparedGeometry NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPreparedNearestPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSPreparedNearestPoints")
  set_tests_properties(unit-capi-GEOSPreparedNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPreparedNearestPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSPreparedNearestPoints")
  set_tests_properties(unit-capi-GEOSPreparedNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPreparedNearestPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPreparedNearestPoints")
  set_tests_properties(unit-capi-GEOSPreparedNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPreparedNearestPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPreparedNearestPoints")
  set_tests_properties(unit-capi-GEOSPreparedNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPreparedNearestPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSProject "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSProject")
  set_tests_properties(unit-capi-GEOSProject PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSProject "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSProject")
  set_tests_properties(unit-capi-GEOSProject PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSProject "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSProject")
  set_tests_properties(unit-capi-GEOSProject PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSProject "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSProject")
  set_tests_properties(unit-capi-GEOSProject PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSProject NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelateBoundaryNodeRule NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelatePatternMatch "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelatePatternMatch "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelatePatternMatch "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelatePatternMatch "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelatePatternMatch NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelatePattern "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSRelatePattern")
  set_tests_properties(unit-capi-GEOSRelatePattern PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelatePattern "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSRelatePattern")
  set_tests_properties(unit-capi-GEOSRelatePattern PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelatePattern "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelatePattern")
  set_tests_properties(unit-capi-GEOSRelatePattern PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelatePattern "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelatePattern")
  set_tests_properties(unit-capi-GEOSRelatePattern PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelatePattern NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelate "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSRelate")
  set_tests_properties(unit-capi-GEOSRelate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelate "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSRelate")
  set_tests_properties(unit-capi-GEOSRelate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelate "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelate")
  set_tests_properties(unit-capi-GEOSRelate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelate "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelate")
  set_tests_properties(unit-capi-GEOSRelate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelate NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRemoveRepeatedPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSRemoveRepeatedPoints")
  set_tests_properties(unit-capi-GEOSRemoveRepeatedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRemoveRepeatedPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSRemoveRepeatedPoints")
  set_tests_properties(unit-capi-GEOSRemoveRepeatedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRemoveRepeatedPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRemoveRepeatedPoints")
  set_tests_properties(unit-capi-GEOSRemoveRepeatedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRemoveRepeatedPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRemoveRepeatedPoints")
  set_tests_properties(unit-capi-GEOSRemoveRepeatedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRemoveRepeatedPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSReverse "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSReverse "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSReverse "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSReverse "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSReverse NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSTRtree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSTRtree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSTRtree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSTRtree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSTRtree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSegmentIntersection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSegmentIntersection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSegmentIntersection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSegmentIntersection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSegmentIntersection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSetSRID "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSetSRID")
  set_tests_properties(unit-capi-GEOSSetSRID PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSetSRID "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSetSRID")
  set_tests_properties(unit-capi-GEOSSetSRID PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSetSRID "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSetSRID")
  set_tests_properties(unit-capi-GEOSSetSRID PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSetSRID "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSetSRID")
  set_tests_properties(unit-capi-GEOSSetSRID PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSetSRID NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSharedPaths "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSharedPaths "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSharedPaths "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSharedPaths "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSharedPaths NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSimplify "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSimplify "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSimplify "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSimplify "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSimplify NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSnap "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSnap "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSnap "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSnap "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSnap NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSymDifferencePrec "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSymDifferencePrec")
  set_tests_properties(unit-capi-GEOSSymDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSymDifferencePrec "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSymDifferencePrec")
  set_tests_properties(unit-capi-GEOSSymDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSymDifferencePrec "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSymDifferencePrec")
  set_tests_properties(unit-capi-GEOSSymDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSymDifferencePrec "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSymDifferencePrec")
  set_tests_properties(unit-capi-GEOSSymDifferencePrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSymDifferencePrec NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSymDifference "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSSymDifference")
  set_tests_properties(unit-capi-GEOSSymDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSymDifference "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSSymDifference")
  set_tests_properties(unit-capi-GEOSSymDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSymDifference "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSymDifference")
  set_tests_properties(unit-capi-GEOSSymDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSymDifference "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSymDifference")
  set_tests_properties(unit-capi-GEOSSymDifference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSymDifference NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSTopologyPreserveSimplify "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSTopologyPreserveSimplify")
  set_tests_properties(unit-capi-GEOSTopologyPreserveSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSTopologyPreserveSimplify "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSTopologyPreserveSimplify")
  set_tests_properties(unit-capi-GEOSTopologyPreserveSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSTopologyPreserveSimplify "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSTopologyPreserveSimplify")
  set_tests_properties(unit-capi-GEOSTopologyPreserveSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSTopologyPreserveSimplify "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSTopologyPreserveSimplify")
  set_tests_properties(unit-capi-GEOSTopologyPreserveSimplify PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSTopologyPreserveSimplify NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSTouches "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSTouches")
  set_tests_properties(unit-capi-GEOSTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSTouches "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSTouches")
  set_tests_properties(unit-capi-GEOSTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSTouches "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSTouches")
  set_tests_properties(unit-capi-GEOSTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSTouches "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSTouches")
  set_tests_properties(unit-capi-GEOSTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSTouches NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnaryUnionPrec "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUnaryUnionPrec")
  set_tests_properties(unit-capi-GEOSUnaryUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnaryUnionPrec "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUnaryUnionPrec")
  set_tests_properties(unit-capi-GEOSUnaryUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnaryUnionPrec "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnaryUnionPrec")
  set_tests_properties(unit-capi-GEOSUnaryUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnaryUnionPrec "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnaryUnionPrec")
  set_tests_properties(unit-capi-GEOSUnaryUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnaryUnionPrec NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnaryUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnaryUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnaryUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnaryUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnaryUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnionCascaded "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUnionCascaded")
  set_tests_properties(unit-capi-GEOSUnionCascaded PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnionCascaded "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUnionCascaded")
  set_tests_properties(unit-capi-GEOSUnionCascaded PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnionCascaded "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnionCascaded")
  set_tests_properties(unit-capi-GEOSUnionCascaded PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnionCascaded "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnionCascaded")
  set_tests_properties(unit-capi-GEOSUnionCascaded PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnionCascaded NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnionPrec "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUnionPrec")
  set_tests_properties(unit-capi-GEOSUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnionPrec "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUnionPrec")
  set_tests_properties(unit-capi-GEOSUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnionPrec "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnionPrec")
  set_tests_properties(unit-capi-GEOSUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnionPrec "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnionPrec")
  set_tests_properties(unit-capi-GEOSUnionPrec PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnionPrec NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUnion")
  set_tests_properties(unit-capi-GEOSUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUnion")
  set_tests_properties(unit-capi-GEOSUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnion")
  set_tests_properties(unit-capi-GEOSUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnion")
  set_tests_properties(unit-capi-GEOSUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUserData "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUserData "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUserData "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUserData "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUserData NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSVoronoiDiagram "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSVoronoiDiagram "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSVoronoiDiagram "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSVoronoiDiagram "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSVoronoiDiagram NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSWKBReader "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSWKBReader")
  set_tests_properties(unit-capi-GEOSWKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSWKBReader "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSWKBReader")
  set_tests_properties(unit-capi-GEOSWKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSWKBReader "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSWKBReader")
  set_tests_properties(unit-capi-GEOSWKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSWKBReader "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSWKBReader")
  set_tests_properties(unit-capi-GEOSWKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSWKBReader NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSWKBWriter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSWKBWriter")
  set_tests_properties(unit-capi-GEOSWKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSWKBWriter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSWKBWriter")
  set_tests_properties(unit-capi-GEOSWKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSWKBWriter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSWKBWriter")
  set_tests_properties(unit-capi-GEOSWKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSWKBWriter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSWKBWriter")
  set_tests_properties(unit-capi-GEOSWKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSWKBWriter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSWKTWriter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSWKTWriter")
  set_tests_properties(unit-capi-GEOSWKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSWKTWriter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSWKTWriter")
  set_tests_properties(unit-capi-GEOSWKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSWKTWriter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSWKTWriter")
  set_tests_properties(unit-capi-GEOSWKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSWKTWriter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSWKTWriter")
  set_tests_properties(unit-capi-GEOSWKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSWKTWriter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSWithin "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSWithin "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSWithin "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSWithin "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSWithin NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisClosed "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisClosed "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisClosed "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisClosed "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisClosed NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisRing")
  set_tests_properties(unit-capi-GEOSisRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisRing")
  set_tests_properties(unit-capi-GEOSisRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisRing")
  set_tests_properties(unit-capi-GEOSisRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisRing")
  set_tests_properties(unit-capi-GEOSisRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisSimple "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisSimple")
  set_tests_properties(unit-capi-GEOSisSimple PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisSimple "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisSimple")
  set_tests_properties(unit-capi-GEOSisSimple PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisSimple "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisSimple")
  set_tests_properties(unit-capi-GEOSisSimple PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisSimple "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisSimple")
  set_tests_properties(unit-capi-GEOSisSimple PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisSimple NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisValidDetail "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisValidDetail "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisValidDetail "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisValidDetail "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisValidDetail NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisValidReason "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisValidReason")
  set_tests_properties(unit-capi-GEOSisValidReason PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisValidReason "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisValidReason")
  set_tests_properties(unit-capi-GEOSisValidReason PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisValidReason "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisValidReason")
  set_tests_properties(unit-capi-GEOSisValidReason PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisValidReason "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisValidReason")
  set_tests_properties(unit-capi-GEOSisValidReason PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisValidReason NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisValid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "capi::GEOSisValid")
  set_tests_properties(unit-capi-GEOSisValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisValid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "capi::GEOSisValid")
  set_tests_properties(unit-capi-GEOSisValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisValid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisValid")
  set_tests_properties(unit-capi-GEOSisValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisValid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisValid")
  set_tests_properties(unit-capi-GEOSisValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisValid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-CoverageGapFinder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::CoverageGapFinder")
  set_tests_properties(unit-coverage-CoverageGapFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-CoverageGapFinder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::CoverageGapFinder")
  set_tests_properties(unit-coverage-CoverageGapFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-CoverageGapFinder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::CoverageGapFinder")
  set_tests_properties(unit-coverage-CoverageGapFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-CoverageGapFinder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::CoverageGapFinder")
  set_tests_properties(unit-coverage-CoverageGapFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-CoverageGapFinder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-CoveragePolygonValidator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::CoveragePolygonValidator")
  set_tests_properties(unit-coverage-CoveragePolygonValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-CoveragePolygonValidator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::CoveragePolygonValidator")
  set_tests_properties(unit-coverage-CoveragePolygonValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-CoveragePolygonValidator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::CoveragePolygonValidator")
  set_tests_properties(unit-coverage-CoveragePolygonValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-CoveragePolygonValidator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::CoveragePolygonValidator")
  set_tests_properties(unit-coverage-CoveragePolygonValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-CoveragePolygonValidator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-CoverageRingEdges "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::CoverageRingEdges")
  set_tests_properties(unit-coverage-CoverageRingEdges PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-CoverageRingEdges "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::CoverageRingEdges")
  set_tests_properties(unit-coverage-CoverageRingEdges PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-CoverageRingEdges "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::CoverageRingEdges")
  set_tests_properties(unit-coverage-CoverageRingEdges PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-CoverageRingEdges "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::CoverageRingEdges")
  set_tests_properties(unit-coverage-CoverageRingEdges PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-CoverageRingEdges NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-CoverageSimplifier "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::CoverageSimplifier")
  set_tests_properties(unit-coverage-CoverageSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-CoverageSimplifier "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::CoverageSimplifier")
  set_tests_properties(unit-coverage-CoverageSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-CoverageSimplifier "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::CoverageSimplifier")
  set_tests_properties(unit-coverage-CoverageSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-CoverageSimplifier "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::CoverageSimplifier")
  set_tests_properties(unit-coverage-CoverageSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-CoverageSimplifier NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-CoverageValidator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::CoverageValidator")
  set_tests_properties(unit-coverage-CoverageValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-CoverageValidator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::CoverageValidator")
  set_tests_properties(unit-coverage-CoverageValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-CoverageValidator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::CoverageValidator")
  set_tests_properties(unit-coverage-CoverageValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-CoverageValidator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::CoverageValidator")
  set_tests_properties(unit-coverage-CoverageValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-CoverageValidator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-coverage-TPVWSimplifier "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::coverage::TPVWSimplifier")
  set_tests_properties(unit-coverage-TPVWSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-coverage-TPVWSimplifier "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::coverage::TPVWSimplifier")
  set_tests_properties(unit-coverage-TPVWSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-coverage-TPVWSimplifier "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::coverage::TPVWSimplifier")
  set_tests_properties(unit-coverage-TPVWSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-coverage-TPVWSimplifier "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::coverage::TPVWSimplifier")
  set_tests_properties(unit-coverage-TPVWSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-coverage-TPVWSimplifier NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-edgegraph-EdgeGraph "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::edgegraph::EdgeGraph")
  set_tests_properties(unit-edgegraph-EdgeGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-edgegraph-EdgeGraph "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::edgegraph::EdgeGraph")
  set_tests_properties(unit-edgegraph-EdgeGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-edgegraph-EdgeGraph "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::edgegraph::EdgeGraph")
  set_tests_properties(unit-edgegraph-EdgeGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-edgegraph-EdgeGraph "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::edgegraph::EdgeGraph")
  set_tests_properties(unit-edgegraph-EdgeGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-edgegraph-EdgeGraph NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateList "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateList "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateList "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateList "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateList NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateSequenceIterator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateSequenceIterator")
  set_tests_properties(unit-geom-CoordinateSequenceIterator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateSequenceIterator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateSequenceIterator")
  set_tests_properties(unit-geom-CoordinateSequenceIterator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateSequenceIterator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateSequenceIterator")
  set_tests_properties(unit-geom-CoordinateSequenceIterator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateSequenceIterator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateSequenceIterator")
  set_tests_properties(unit-geom-CoordinateSequenceIterator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateSequenceIterator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateSequence "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateSequence")
  set_tests_properties(unit-geom-CoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateSequence "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateSequence")
  set_tests_properties(unit-geom-CoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateSequence "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateSequence")
  set_tests_properties(unit-geom-CoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateSequence "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateSequence")
  set_tests_properties(unit-geom-CoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateSequence NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateSequences "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateSequences")
  set_tests_properties(unit-geom-CoordinateSequences PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateSequences "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateSequences")
  set_tests_properties(unit-geom-CoordinateSequences PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateSequences "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateSequences")
  set_tests_properties(unit-geom-CoordinateSequences PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateSequences "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateSequences")
  set_tests_properties(unit-geom-CoordinateSequences PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateSequences NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Coordinate "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Coordinate "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Coordinate "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Coordinate "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Coordinate NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Dimension "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Dimension "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Dimension "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Dimension "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Dimension NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Envelope "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Envelope "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Envelope "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Envelope "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Envelope NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-clone "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-clone "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-clone "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-clone "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-clone NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-covers "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-covers "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-covers "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-covers "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-covers NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-difference "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::difference")
  set_tests_properties(unit-geom-Geometry-difference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-difference "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::difference")
  set_tests_properties(unit-geom-Geometry-difference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-difference "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::difference")
  set_tests_properties(unit-geom-Geometry-difference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-difference "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::difference")
  set_tests_properties(unit-geom-Geometry-difference PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-difference NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-equals "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-equals "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-equals "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-equals "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-equals NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-getCentroid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::getCentroid")
  set_tests_properties(unit-geom-Geometry-getCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-getCentroid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::getCentroid")
  set_tests_properties(unit-geom-Geometry-getCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-getCentroid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::getCentroid")
  set_tests_properties(unit-geom-Geometry-getCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-getCentroid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::getCentroid")
  set_tests_properties(unit-geom-Geometry-getCentroid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-getCentroid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-isRectangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-isRectangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-isRectangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-isRectangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-isRectangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-normalize "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-normalize "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-normalize "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-normalize "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-normalize NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-toText "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::toText")
  set_tests_properties(unit-geom-Geometry-toText PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-toText "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::toText")
  set_tests_properties(unit-geom-Geometry-toText PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-toText "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::toText")
  set_tests_properties(unit-geom-Geometry-toText PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-toText "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::toText")
  set_tests_properties(unit-geom-Geometry-toText PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-toText NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-touches "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-touches "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-touches "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-touches "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-touches NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryCollection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryCollection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryCollection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryCollection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryCollection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryComponentFilter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryComponentFilter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryComponentFilter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryComponentFilter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryComponentFilter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryFactory "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryFactory "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryFactory "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryFactory "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryFactory NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryFilter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryFilter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryFilter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryFilter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryFilter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-HeuristicOverlay "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::HeuristicOverlay")
  set_tests_properties(unit-geom-HeuristicOverlay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-HeuristicOverlay "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::HeuristicOverlay")
  set_tests_properties(unit-geom-HeuristicOverlay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-HeuristicOverlay "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::HeuristicOverlay")
  set_tests_properties(unit-geom-HeuristicOverlay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-HeuristicOverlay "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::HeuristicOverlay")
  set_tests_properties(unit-geom-HeuristicOverlay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-HeuristicOverlay NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-IntersectionMatrix "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-IntersectionMatrix "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-IntersectionMatrix "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-IntersectionMatrix "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-IntersectionMatrix NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LineSegment "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LineSegment "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LineSegment "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LineSegment "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LineSegment NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LineString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LineString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LineString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LineString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LineString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LinearRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LinearRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LinearRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LinearRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LinearRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Location "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Location "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Location "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Location "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Location NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiLineString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiLineString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiLineString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiLineString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiLineString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiPoint "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiPoint "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiPoint "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiPoint "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiPoint NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiPolygon "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiPolygon "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiPolygon "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiPolygon "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiPolygon NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Point "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Point "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Point "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Point "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Point NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Polygon "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Polygon "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Polygon "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Polygon "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Polygon NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-PrecisionModel "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-PrecisionModel "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-PrecisionModel "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-PrecisionModel "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-PrecisionModel NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Triangle "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Triangle "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Triangle "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Triangle "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Triangle NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-prep-PreparedGeometryFactory NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-prep-PreparedGeometry "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry")
  set_tests_properties(unit-geom-prep-PreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-prep-PreparedGeometry "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry")
  set_tests_properties(unit-geom-prep-PreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-prep-PreparedGeometry "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry")
  set_tests_properties(unit-geom-prep-PreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-prep-PreparedGeometry "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry")
  set_tests_properties(unit-geom-prep-PreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-prep-PreparedGeometry NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-prep-PreparedGeometryTouches "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryTouches")
  set_tests_properties(unit-geom-prep-PreparedGeometryTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-prep-PreparedGeometryTouches "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryTouches")
  set_tests_properties(unit-geom-prep-PreparedGeometryTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-prep-PreparedGeometryTouches "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryTouches")
  set_tests_properties(unit-geom-prep-PreparedGeometryTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-prep-PreparedGeometryTouches "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryTouches")
  set_tests_properties(unit-geom-prep-PreparedGeometryTouches PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-prep-PreparedGeometryTouches NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-util-GeometryCombiner "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::util::GeometryCombiner")
  set_tests_properties(unit-geom-util-GeometryCombiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-util-GeometryCombiner "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::util::GeometryCombiner")
  set_tests_properties(unit-geom-util-GeometryCombiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-util-GeometryCombiner "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::util::GeometryCombiner")
  set_tests_properties(unit-geom-util-GeometryCombiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-util-GeometryCombiner "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::util::GeometryCombiner")
  set_tests_properties(unit-geom-util-GeometryCombiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-util-GeometryCombiner NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-util-GeometryExtracter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-util-GeometryExtracter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-util-GeometryExtracter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-util-GeometryExtracter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-util-GeometryExtracter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-util-GeometryFixer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::util::GeometryFixer")
  set_tests_properties(unit-geom-util-GeometryFixer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-util-GeometryFixer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::util::GeometryFixer")
  set_tests_properties(unit-geom-util-GeometryFixer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-util-GeometryFixer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::util::GeometryFixer")
  set_tests_properties(unit-geom-util-GeometryFixer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-util-GeometryFixer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::util::GeometryFixer")
  set_tests_properties(unit-geom-util-GeometryFixer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-util-GeometryFixer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-util-GeometryMapper "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geom::util::GeometryMapper")
  set_tests_properties(unit-geom-util-GeometryMapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-util-GeometryMapper "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geom::util::GeometryMapper")
  set_tests_properties(unit-geom-util-GeometryMapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-util-GeometryMapper "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::util::GeometryMapper")
  set_tests_properties(unit-geom-util-GeometryMapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-util-GeometryMapper "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::util::GeometryMapper")
  set_tests_properties(unit-geom-util-GeometryMapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-util-GeometryMapper NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geomgraph-TopologyLocation "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::geomgraph::TopologyLocation")
  set_tests_properties(unit-geomgraph-TopologyLocation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geomgraph-TopologyLocation "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::geomgraph::TopologyLocation")
  set_tests_properties(unit-geomgraph-TopologyLocation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geomgraph-TopologyLocation "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::geomgraph::TopologyLocation")
  set_tests_properties(unit-geomgraph-TopologyLocation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geomgraph-TopologyLocation "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geomgraph::TopologyLocation")
  set_tests_properties(unit-geomgraph-TopologyLocation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geomgraph-TopologyLocation NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-VertexSequencePackedRtree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::VertexSequencePackedRtree")
  set_tests_properties(unit-index-VertexSequencePackedRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-VertexSequencePackedRtree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::VertexSequencePackedRtree")
  set_tests_properties(unit-index-VertexSequencePackedRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-VertexSequencePackedRtree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::VertexSequencePackedRtree")
  set_tests_properties(unit-index-VertexSequencePackedRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-VertexSequencePackedRtree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::VertexSequencePackedRtree")
  set_tests_properties(unit-index-VertexSequencePackedRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-VertexSequencePackedRtree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-chain-MonotoneChainBuilder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::chain::MonotoneChainBuilder")
  set_tests_properties(unit-index-chain-MonotoneChainBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-chain-MonotoneChainBuilder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::chain::MonotoneChainBuilder")
  set_tests_properties(unit-index-chain-MonotoneChainBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-chain-MonotoneChainBuilder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::chain::MonotoneChainBuilder")
  set_tests_properties(unit-index-chain-MonotoneChainBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-chain-MonotoneChainBuilder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::chain::MonotoneChainBuilder")
  set_tests_properties(unit-index-chain-MonotoneChainBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-chain-MonotoneChainBuilder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-kdtree-KdTree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::kdtree::KdTree")
  set_tests_properties(unit-index-kdtree-KdTree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-kdtree-KdTree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::kdtree::KdTree")
  set_tests_properties(unit-index-kdtree-KdTree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-kdtree-KdTree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::kdtree::KdTree")
  set_tests_properties(unit-index-kdtree-KdTree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-kdtree-KdTree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::kdtree::KdTree")
  set_tests_properties(unit-index-kdtree-KdTree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-kdtree-KdTree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-strtree-SIRtree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-strtree-SIRtree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-strtree-SIRtree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-strtree-SIRtree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-strtree-SIRtree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-strtree-SimpleSTRtree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::strtree::SimpleSTRtree")
  set_tests_properties(unit-index-strtree-SimpleSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-strtree-SimpleSTRtree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::strtree::SimpleSTRtree")
  set_tests_properties(unit-index-strtree-SimpleSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-strtree-SimpleSTRtree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::strtree::SimpleSTRtree")
  set_tests_properties(unit-index-strtree-SimpleSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-strtree-SimpleSTRtree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::strtree::SimpleSTRtree")
  set_tests_properties(unit-index-strtree-SimpleSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-strtree-SimpleSTRtree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-strtree-TemplateSTRtree "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::index::strtree::TemplateSTRtree")
  set_tests_properties(unit-index-strtree-TemplateSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-strtree-TemplateSTRtree "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::index::strtree::TemplateSTRtree")
  set_tests_properties(unit-index-strtree-TemplateSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-strtree-TemplateSTRtree "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::index::strtree::TemplateSTRtree")
  set_tests_properties(unit-index-strtree-TemplateSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-strtree-TemplateSTRtree "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::strtree::TemplateSTRtree")
  set_tests_properties(unit-index-strtree-TemplateSTRtree PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-strtree-TemplateSTRtree NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-ByteOrderValues "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-ByteOrderValues "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-ByteOrderValues "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-ByteOrderValues "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-ByteOrderValues NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-GeoJSONFeature "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::GeoJSONFeature")
  set_tests_properties(unit-io-GeoJSONFeature PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-GeoJSONFeature "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::GeoJSONFeature")
  set_tests_properties(unit-io-GeoJSONFeature PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-GeoJSONFeature "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::GeoJSONFeature")
  set_tests_properties(unit-io-GeoJSONFeature PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-GeoJSONFeature "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::GeoJSONFeature")
  set_tests_properties(unit-io-GeoJSONFeature PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-GeoJSONFeature NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-GeoJSONReader "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::GeoJSONReader")
  set_tests_properties(unit-io-GeoJSONReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-GeoJSONReader "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::GeoJSONReader")
  set_tests_properties(unit-io-GeoJSONReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-GeoJSONReader "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::GeoJSONReader")
  set_tests_properties(unit-io-GeoJSONReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-GeoJSONReader "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::GeoJSONReader")
  set_tests_properties(unit-io-GeoJSONReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-GeoJSONReader NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-GeoJSONValue "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::GeoJSONValue")
  set_tests_properties(unit-io-GeoJSONValue PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-GeoJSONValue "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::GeoJSONValue")
  set_tests_properties(unit-io-GeoJSONValue PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-GeoJSONValue "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::GeoJSONValue")
  set_tests_properties(unit-io-GeoJSONValue PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-GeoJSONValue "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::GeoJSONValue")
  set_tests_properties(unit-io-GeoJSONValue PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-GeoJSONValue NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-GeoJSONWriter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::GeoJSONWriter")
  set_tests_properties(unit-io-GeoJSONWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-GeoJSONWriter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::GeoJSONWriter")
  set_tests_properties(unit-io-GeoJSONWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-GeoJSONWriter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::GeoJSONWriter")
  set_tests_properties(unit-io-GeoJSONWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-GeoJSONWriter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::GeoJSONWriter")
  set_tests_properties(unit-io-GeoJSONWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-GeoJSONWriter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKBReader "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKBReader "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKBReader "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKBReader "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKBReader NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKBWriter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKBWriter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKBWriter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKBWriter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKBWriter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKTReader "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKTReader "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKTReader "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKTReader "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKTReader NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKTWriter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKTWriter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKTWriter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKTWriter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKTWriter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-Writer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-Writer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-Writer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-Writer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-Writer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-linearref-LengthIndexedLine "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-linearref-LengthIndexedLine "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-linearref-LengthIndexedLine "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-linearref-LengthIndexedLine "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-linearref-LengthIndexedLine NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-math-DD "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::math::DD")
  set_tests_properties(unit-math-DD PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-math-DD "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::math::DD")
  set_tests_properties(unit-math-DD PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-math-DD "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::math::DD")
  set_tests_properties(unit-math-DD PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-math-DD "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::math::DD")
  set_tests_properties(unit-math-DD PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-math-DD NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-BasicSegmentString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-BasicSegmentString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-BasicSegmentString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-BasicSegmentString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-BasicSegmentString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-NodedSegmentString "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-NodedSegmentString "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-NodedSegmentString "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-NodedSegmentString "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-NodedSegmentString NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-OrientedCoordinateArray "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-OrientedCoordinateArray "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-OrientedCoordinateArray "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-OrientedCoordinateArray "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-OrientedCoordinateArray NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-SegmentNode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-SegmentNode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-SegmentNode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-SegmentNode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-SegmentNode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-SegmentPointComparator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-SegmentPointComparator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-SegmentPointComparator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-SegmentPointComparator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-SegmentPointComparator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snap-SnappingNoder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::snap::SnappingNoder")
  set_tests_properties(unit-noding-snap-SnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snap-SnappingNoder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::snap::SnappingNoder")
  set_tests_properties(unit-noding-snap-SnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snap-SnappingNoder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snap::SnappingNoder")
  set_tests_properties(unit-noding-snap-SnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snap-SnappingNoder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snap::SnappingNoder")
  set_tests_properties(unit-noding-snap-SnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snap-SnappingNoder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snapround-HotPixel "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snapround-HotPixel "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snapround-HotPixel "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snapround-HotPixel "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snapround-HotPixel NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snapround-MCIndexSnapRounder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snapround-SnapRoundingNoder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::noding::snapround::SnapRoundingNoder")
  set_tests_properties(unit-noding-snapround-SnapRoundingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snapround-SnapRoundingNoder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::noding::snapround::SnapRoundingNoder")
  set_tests_properties(unit-noding-snapround-SnapRoundingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snapround-SnapRoundingNoder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snapround::SnapRoundingNoder")
  set_tests_properties(unit-noding-snapround-SnapRoundingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snapround-SnapRoundingNoder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snapround::SnapRoundingNoder")
  set_tests_properties(unit-noding-snapround-SnapRoundingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snapround-SnapRoundingNoder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-BoundaryOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::BoundaryOp")
  set_tests_properties(unit-operation-BoundaryOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-BoundaryOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::BoundaryOp")
  set_tests_properties(unit-operation-BoundaryOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-BoundaryOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::BoundaryOp")
  set_tests_properties(unit-operation-BoundaryOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-BoundaryOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::BoundaryOp")
  set_tests_properties(unit-operation-BoundaryOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-BoundaryOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferBuilder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferBuilder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferBuilder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferBuilder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferBuilder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferParameters "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferParameters "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferParameters "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferParameters "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferParameters NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-OffsetCurve "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::OffsetCurve")
  set_tests_properties(unit-operation-buffer-OffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-OffsetCurve "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::buffer::OffsetCurve")
  set_tests_properties(unit-operation-buffer-OffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-OffsetCurve "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::OffsetCurve")
  set_tests_properties(unit-operation-buffer-OffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-OffsetCurve "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::OffsetCurve")
  set_tests_properties(unit-operation-buffer-OffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-OffsetCurve NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-cluster-ClusterFinder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::cluster::ClusterFinder")
  set_tests_properties(unit-operation-cluster-ClusterFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-cluster-ClusterFinder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::cluster::ClusterFinder")
  set_tests_properties(unit-operation-cluster-ClusterFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-cluster-ClusterFinder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::cluster::ClusterFinder")
  set_tests_properties(unit-operation-cluster-ClusterFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-cluster-ClusterFinder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::cluster::ClusterFinder")
  set_tests_properties(unit-operation-cluster-ClusterFinder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-cluster-ClusterFinder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-cluster-DisjointOperation "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::cluster::DisjointOperation")
  set_tests_properties(unit-operation-cluster-DisjointOperation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-cluster-DisjointOperation "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::cluster::DisjointOperation")
  set_tests_properties(unit-operation-cluster-DisjointOperation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-cluster-DisjointOperation "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::cluster::DisjointOperation")
  set_tests_properties(unit-operation-cluster-DisjointOperation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-cluster-DisjointOperation "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::cluster::DisjointOperation")
  set_tests_properties(unit-operation-cluster-DisjointOperation PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-cluster-DisjointOperation NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-cluster-GeometryFlattener "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::cluster::GeometryFlattener")
  set_tests_properties(unit-operation-cluster-GeometryFlattener PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-cluster-GeometryFlattener "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::cluster::GeometryFlattener")
  set_tests_properties(unit-operation-cluster-GeometryFlattener PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-cluster-GeometryFlattener "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::cluster::GeometryFlattener")
  set_tests_properties(unit-operation-cluster-GeometryFlattener PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-cluster-GeometryFlattener "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::cluster::GeometryFlattener")
  set_tests_properties(unit-operation-cluster-GeometryFlattener PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-cluster-GeometryFlattener NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-distance-DistanceOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-distance-DistanceOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-distance-DistanceOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-distance-DistanceOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-distance-DistanceOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-distance-IndexedFacetDistance "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-distance-IndexedFacetDistance "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-distance-IndexedFacetDistance "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-distance-IndexedFacetDistance "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-distance-IndexedFacetDistance NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-CascadedPolygonUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-CoverageUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-CoverageUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-CoverageUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-CoverageUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-CoverageUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-UnaryUnionOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-UnaryUnionOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-UnaryUnionOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-UnaryUnionOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-UnaryUnionOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-intersection-RectangleIntersection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-intersection-RectangleIntersection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-intersection-RectangleIntersection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-intersection-RectangleIntersection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-intersection-RectangleIntersection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-linemerge-LineMerger "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-linemerge-LineMerger "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-linemerge-LineMerger "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-linemerge-LineMerger "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-linemerge-LineMerger NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-linemerge-LineSequencer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-linemerge-LineSequencer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-linemerge-LineSequencer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-linemerge-LineSequencer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-linemerge-LineSequencer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-OverlayOpUnion "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-OverlayOpUnion "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-OverlayOpUnion "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-OverlayOpUnion "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-OverlayOpUnion NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-snap-GeometrySnapper NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-snap-LineStringSnapper NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-FuzzyPointLocator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-OffsetPointGenerator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-OverlayResultValidator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-CoverageUnionNG "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::CoverageUnionNG")
  set_tests_properties(unit-operation-overlayng-CoverageUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-CoverageUnionNG "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::CoverageUnionNG")
  set_tests_properties(unit-operation-overlayng-CoverageUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-CoverageUnionNG "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::CoverageUnionNG")
  set_tests_properties(unit-operation-overlayng-CoverageUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-CoverageUnionNG "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::CoverageUnionNG")
  set_tests_properties(unit-operation-overlayng-CoverageUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-CoverageUnionNG NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-ElevationModel "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::ElevationModel")
  set_tests_properties(unit-operation-overlayng-ElevationModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-ElevationModel "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::ElevationModel")
  set_tests_properties(unit-operation-overlayng-ElevationModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-ElevationModel "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::ElevationModel")
  set_tests_properties(unit-operation-overlayng-ElevationModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-ElevationModel "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::ElevationModel")
  set_tests_properties(unit-operation-overlayng-ElevationModel PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-ElevationModel NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-LineLimiter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::LineLimiter")
  set_tests_properties(unit-operation-overlayng-LineLimiter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-LineLimiter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::LineLimiter")
  set_tests_properties(unit-operation-overlayng-LineLimiter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-LineLimiter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::LineLimiter")
  set_tests_properties(unit-operation-overlayng-LineLimiter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-LineLimiter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::LineLimiter")
  set_tests_properties(unit-operation-overlayng-LineLimiter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-LineLimiter NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayGraph "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayGraph")
  set_tests_properties(unit-operation-overlayng-OverlayGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayGraph "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayGraph")
  set_tests_properties(unit-operation-overlayng-OverlayGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayGraph "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayGraph")
  set_tests_properties(unit-operation-overlayng-OverlayGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayGraph "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayGraph")
  set_tests_properties(unit-operation-overlayng-OverlayGraph PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayGraph NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGFloatingNoder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGFloatingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGFloatingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGFloatingNoder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGFloatingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGFloatingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGFloatingNoder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGFloatingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGFloatingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGFloatingNoder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGFloatingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGFloatingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGFloatingNoder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGGeometryCollection "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGGeometryCollection")
  set_tests_properties(unit-operation-overlayng-OverlayNGGeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGGeometryCollection "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGGeometryCollection")
  set_tests_properties(unit-operation-overlayng-OverlayNGGeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGGeometryCollection "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGGeometryCollection")
  set_tests_properties(unit-operation-overlayng-OverlayNGGeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGGeometryCollection "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGGeometryCollection")
  set_tests_properties(unit-operation-overlayng-OverlayNGGeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGGeometryCollection NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGMixedPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGMixedPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGMixedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGMixedPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGMixedPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGMixedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGMixedPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGMixedPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGMixedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGMixedPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGMixedPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGMixedPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGMixedPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGPoints "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGPoints "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGPoints "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGPoints "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGPoints")
  set_tests_properties(unit-operation-overlayng-OverlayNGPoints PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGPoints NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGRobust "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGRobust")
  set_tests_properties(unit-operation-overlayng-OverlayNGRobust PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGRobust "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGRobust")
  set_tests_properties(unit-operation-overlayng-OverlayNGRobust PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGRobust "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGRobust")
  set_tests_properties(unit-operation-overlayng-OverlayNGRobust PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGRobust "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGRobust")
  set_tests_properties(unit-operation-overlayng-OverlayNGRobust PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGRobust NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingNoder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingNoder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingNoder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingNoder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingNoder")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingNoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGSnappingNoder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingOne "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingOne")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingOne PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingOne "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingOne")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingOne PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingOne "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingOne")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingOne PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGSnappingOne "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGSnappingOne")
  set_tests_properties(unit-operation-overlayng-OverlayNGSnappingOne PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGSnappingOne NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGStrictMode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGStrictMode")
  set_tests_properties(unit-operation-overlayng-OverlayNGStrictMode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGStrictMode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGStrictMode")
  set_tests_properties(unit-operation-overlayng-OverlayNGStrictMode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGStrictMode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGStrictMode")
  set_tests_properties(unit-operation-overlayng-OverlayNGStrictMode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGStrictMode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGStrictMode")
  set_tests_properties(unit-operation-overlayng-OverlayNGStrictMode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGStrictMode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNG "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNG")
  set_tests_properties(unit-operation-overlayng-OverlayNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNG "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNG")
  set_tests_properties(unit-operation-overlayng-OverlayNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNG "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNG")
  set_tests_properties(unit-operation-overlayng-OverlayNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNG "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNG")
  set_tests_properties(unit-operation-overlayng-OverlayNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNG NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-OverlayNGZ "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGZ")
  set_tests_properties(unit-operation-overlayng-OverlayNGZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-OverlayNGZ "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGZ")
  set_tests_properties(unit-operation-overlayng-OverlayNGZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-OverlayNGZ "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGZ")
  set_tests_properties(unit-operation-overlayng-OverlayNGZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-OverlayNGZ "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::OverlayNGZ")
  set_tests_properties(unit-operation-overlayng-OverlayNGZ PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-OverlayNGZ NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-PrecisionReducer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::PrecisionReducer")
  set_tests_properties(unit-operation-overlayng-PrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-PrecisionReducer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::PrecisionReducer")
  set_tests_properties(unit-operation-overlayng-PrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-PrecisionReducer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::PrecisionReducer")
  set_tests_properties(unit-operation-overlayng-PrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-PrecisionReducer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::PrecisionReducer")
  set_tests_properties(unit-operation-overlayng-PrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-PrecisionReducer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-PrecisionUtil "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::PrecisionUtil")
  set_tests_properties(unit-operation-overlayng-PrecisionUtil PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-PrecisionUtil "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::PrecisionUtil")
  set_tests_properties(unit-operation-overlayng-PrecisionUtil PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-PrecisionUtil "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::PrecisionUtil")
  set_tests_properties(unit-operation-overlayng-PrecisionUtil PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-PrecisionUtil "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::PrecisionUtil")
  set_tests_properties(unit-operation-overlayng-PrecisionUtil PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-PrecisionUtil NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-RingClipper "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::RingClipper")
  set_tests_properties(unit-operation-overlayng-RingClipper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-RingClipper "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::RingClipper")
  set_tests_properties(unit-operation-overlayng-RingClipper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-RingClipper "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::RingClipper")
  set_tests_properties(unit-operation-overlayng-RingClipper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-RingClipper "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::RingClipper")
  set_tests_properties(unit-operation-overlayng-RingClipper PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-RingClipper NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlayng-UnaryUnionNG "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::overlayng::UnaryUnionNG")
  set_tests_properties(unit-operation-overlayng-UnaryUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlayng-UnaryUnionNG "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::overlayng::UnaryUnionNG")
  set_tests_properties(unit-operation-overlayng-UnaryUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlayng-UnaryUnionNG "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlayng::UnaryUnionNG")
  set_tests_properties(unit-operation-overlayng-UnaryUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlayng-UnaryUnionNG "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlayng::UnaryUnionNG")
  set_tests_properties(unit-operation-overlayng-UnaryUnionNG PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlayng-UnaryUnionNG NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-polygonize-Polygonize "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-polygonize-Polygonize "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-polygonize-Polygonize "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-polygonize-Polygonize "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-polygonize-Polygonize NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-relate-RelateBoundaryNodeRule "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::relate::RelateBoundaryNodeRule")
  set_tests_properties(unit-operation-relate-RelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-relate-RelateBoundaryNodeRule "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::relate::RelateBoundaryNodeRule")
  set_tests_properties(unit-operation-relate-RelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-relate-RelateBoundaryNodeRule "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::relate::RelateBoundaryNodeRule")
  set_tests_properties(unit-operation-relate-RelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-relate-RelateBoundaryNodeRule "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::relate::RelateBoundaryNodeRule")
  set_tests_properties(unit-operation-relate-RelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-relate-RelateBoundaryNodeRule NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-relate-RelateOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::relate::RelateOp")
  set_tests_properties(unit-operation-relate-RelateOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-relate-RelateOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::relate::RelateOp")
  set_tests_properties(unit-operation-relate-RelateOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-relate-RelateOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::relate::RelateOp")
  set_tests_properties(unit-operation-relate-RelateOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-relate-RelateOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::relate::RelateOp")
  set_tests_properties(unit-operation-relate-RelateOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-relate-RelateOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-sharedpaths-SharedPathsOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-IsSimpleOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::IsSimpleOp")
  set_tests_properties(unit-operation-valid-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-IsSimpleOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::IsSimpleOp")
  set_tests_properties(unit-operation-valid-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-IsSimpleOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::IsSimpleOp")
  set_tests_properties(unit-operation-valid-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-IsSimpleOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::IsSimpleOp")
  set_tests_properties(unit-operation-valid-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-IsSimpleOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-IsValidOp "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-IsValidOp "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-IsValidOp "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-IsValidOp "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-IsValidOp NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-MakeValid "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::MakeValid")
  set_tests_properties(unit-operation-valid-MakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-MakeValid "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::MakeValid")
  set_tests_properties(unit-operation-valid-MakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-MakeValid "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::MakeValid")
  set_tests_properties(unit-operation-valid-MakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-MakeValid "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::MakeValid")
  set_tests_properties(unit-operation-valid-MakeValid PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-MakeValid NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-RepeatedPointRemover "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-RepeatedPointRemover "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-RepeatedPointRemover "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-RepeatedPointRemover "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-RepeatedPointRemover NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-ValidClosedRing "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-ValidClosedRing "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-ValidClosedRing "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-ValidClosedRing "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-ValidClosedRing NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-CommonBits "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-CommonBits "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-CommonBits "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-CommonBits "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-CommonBits NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-GeometryPrecisionReducer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-GeometryPrecisionReducer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-GeometryPrecisionReducer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-GeometryPrecisionReducer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-GeometryPrecisionReducer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-SimpleGeometryPrecisionReducer NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-shape-fractal-HilbertCode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::shape::fractal::HilbertCode")
  set_tests_properties(unit-shape-fractal-HilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-shape-fractal-HilbertCode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::shape::fractal::HilbertCode")
  set_tests_properties(unit-shape-fractal-HilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-shape-fractal-HilbertCode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::shape::fractal::HilbertCode")
  set_tests_properties(unit-shape-fractal-HilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-shape-fractal-HilbertCode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::shape::fractal::HilbertCode")
  set_tests_properties(unit-shape-fractal-HilbertCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-shape-fractal-HilbertCode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-shape-fractal-HilbertEncoder "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::shape::fractal::HilbertEncoder")
  set_tests_properties(unit-shape-fractal-HilbertEncoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-shape-fractal-HilbertEncoder "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::shape::fractal::HilbertEncoder")
  set_tests_properties(unit-shape-fractal-HilbertEncoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-shape-fractal-HilbertEncoder "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::shape::fractal::HilbertEncoder")
  set_tests_properties(unit-shape-fractal-HilbertEncoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-shape-fractal-HilbertEncoder "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::shape::fractal::HilbertEncoder")
  set_tests_properties(unit-shape-fractal-HilbertEncoder PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-shape-fractal-HilbertEncoder NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-shape-fractal-MortonCode "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::shape::fractal::MortonCode")
  set_tests_properties(unit-shape-fractal-MortonCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-shape-fractal-MortonCode "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::shape::fractal::MortonCode")
  set_tests_properties(unit-shape-fractal-MortonCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-shape-fractal-MortonCode "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::shape::fractal::MortonCode")
  set_tests_properties(unit-shape-fractal-MortonCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-shape-fractal-MortonCode "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::shape::fractal::MortonCode")
  set_tests_properties(unit-shape-fractal-MortonCode PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-shape-fractal-MortonCode NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-simplify-DouglasPeuckerSimplifier NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-simplify-PolygonHullSimplifier "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::simplify::PolygonHullSimplifier")
  set_tests_properties(unit-simplify-PolygonHullSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-simplify-PolygonHullSimplifier "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::simplify::PolygonHullSimplifier")
  set_tests_properties(unit-simplify-PolygonHullSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-simplify-PolygonHullSimplifier "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::simplify::PolygonHullSimplifier")
  set_tests_properties(unit-simplify-PolygonHullSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-simplify-PolygonHullSimplifier "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::simplify::PolygonHullSimplifier")
  set_tests_properties(unit-simplify-PolygonHullSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-simplify-PolygonHullSimplifier NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-simplify-TopologyPreservingSimplifier NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-Delaunay "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-Delaunay "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-Delaunay "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-Delaunay "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-Delaunay NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-Voronoi "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-Voronoi "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-Voronoi "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-Voronoi "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-Voronoi NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-polygon-ConstrainedDelaunayTriangulator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::polygon::ConstrainedDelaunayTriangulator")
  set_tests_properties(unit-triangulate-polygon-ConstrainedDelaunayTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-polygon-ConstrainedDelaunayTriangulator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::polygon::ConstrainedDelaunayTriangulator")
  set_tests_properties(unit-triangulate-polygon-ConstrainedDelaunayTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-polygon-ConstrainedDelaunayTriangulator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::polygon::ConstrainedDelaunayTriangulator")
  set_tests_properties(unit-triangulate-polygon-ConstrainedDelaunayTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-polygon-ConstrainedDelaunayTriangulator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::polygon::ConstrainedDelaunayTriangulator")
  set_tests_properties(unit-triangulate-polygon-ConstrainedDelaunayTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-polygon-ConstrainedDelaunayTriangulator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-polygon-PolygonHoleJoiner "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::polygon::PolygonHoleJoiner")
  set_tests_properties(unit-triangulate-polygon-PolygonHoleJoiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-polygon-PolygonHoleJoiner "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::polygon::PolygonHoleJoiner")
  set_tests_properties(unit-triangulate-polygon-PolygonHoleJoiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-polygon-PolygonHoleJoiner "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::polygon::PolygonHoleJoiner")
  set_tests_properties(unit-triangulate-polygon-PolygonHoleJoiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-polygon-PolygonHoleJoiner "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::polygon::PolygonHoleJoiner")
  set_tests_properties(unit-triangulate-polygon-PolygonHoleJoiner PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-polygon-PolygonHoleJoiner NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-polygon-PolygonTriangulator "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::polygon::PolygonTriangulator")
  set_tests_properties(unit-triangulate-polygon-PolygonTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-polygon-PolygonTriangulator "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::polygon::PolygonTriangulator")
  set_tests_properties(unit-triangulate-polygon-PolygonTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-polygon-PolygonTriangulator "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::polygon::PolygonTriangulator")
  set_tests_properties(unit-triangulate-polygon-PolygonTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-polygon-PolygonTriangulator "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::polygon::PolygonTriangulator")
  set_tests_properties(unit-triangulate-polygon-PolygonTriangulator PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-polygon-PolygonTriangulator NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-QuadEdge "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-QuadEdge "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-QuadEdge "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-QuadEdge "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-QuadEdge NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-Vertex "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-Vertex "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-Vertex "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-Vertex "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-Vertex NOT_AVAILABLE)
endif()
if(CTEST_CONFIGURATION_TYPE MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "E:/geos_VS2022/build/bin/Debug/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "E:/geos_VS2022/build/bin/Release/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "E:/geos_VS2022/build/bin/MinSizeRel/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
elseif(CTEST_CONFIGURATION_TYPE MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "E:/geos_VS2022/build/bin/RelWithDebInfo/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "E:/geos_VS2022/tests/unit/CMakeLists.txt;32;add_test;E:/geos_VS2022/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-util-UniqueCoordinateArrayFilter NOT_AVAILABLE)
endif()
